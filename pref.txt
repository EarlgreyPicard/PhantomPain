<div id="configulator">
	<form id="prefpagelist" onsubmit="return Skin.Configulator.page(event);">
	<input type="submit" value="" name="functions" title="機能">
	<input type="submit" value="" name="images" title="画像">
	<input type="submit" value="" name="popups" title="ポップアップ">
	<input type="submit" value="" name="loading" title="読み込み">
	<input type="submit" value="" name="analyze" title="解析">
	<input type="submit" value="" name="thread" title="スレッド">
	@COMMAND<
	__validateTextElements = function(es)
	{
		var b = true;
		for (var i=0; i<es.length; i++)
		{
			b &= __validateTextElement(es[i]);
		}
		if (!b) confirm("入力内容にエラーがあるため保存できません。");
		return b;
	}
	__validateTextElement = function (e)
	{
		var ret = false;
		var dt = e.dataset;
		var v  = e.value;
		if (dt.keybind == "num")
		{	//数値
			if (v.match(/^\-?[\d]+$/)) 
			{
				var min = parseInt(dt.min);
				var max = parseInt(dt.max);
				var t = parseInt(v);
				ret = (t >=min) && (t <= max);
			}
		}
		else
		{
			ret = true;
		}
		e.dataset.validateError = ret ? "" : "y";
		return ret;
	}
	>@

	</form>
	<div id="prefpages">
		<form name="funcPref" class="prefpage" data-key="functions">
		<fieldset><legend>レス拡張</legend><ul>
		<li><label><input type="checkbox" name="ExtendAnchor" @CHECKED<Preference.ExtendAnchor>@>全角文字とコンマ区切りのアンカーを使う</label>
		<li><label><input type="checkbox" name="UseReplaceStrTxt" @CHECKED<Preference.UseReplaceStrTxt>@>ReplaceStr.txtを使用する</label>
		<li><label><input type="text" class="strlen" name="URLShortenLength" data-min="0" data-max="99" data-keybind="num" value="@<Preference.URLShortenLength>@">文字以上のURLを短縮表記する</label>
		</ul></fieldset>
		<fieldset><legend>挙動</legend><ul>
		<li><label><input type="checkbox" name="AutoOpenBoardPane" @CHECKED<Preference.AutoOpenBoardPane>@>スレを開いたとき、自動的に上部スレ一覧を開く</label>
		<li><label>テンプレートポップアップ：<input type="text" class="resno" name="TemplateLength" data-min="0" data-max="99" data-keybind="num" value="@<Preference.TemplateLength>@">件(0でギアを表示)</label>
		<li><label>ナビゲーションチャプター幅：<input type="text" class="resno" name="ChapterWidth" data-min="5" data-max="1000" data-keybind="num" value="@<Preference.ChapterWidth>@">件</label>
		<li><label>レスをポイントしてから<input type="text" class="msec" name="ResMenuAttachDelay" data-min="0" data-max="5000" data-keybind="num" value="@<Preference.ResMenuAttachDelay>@">ミリ秒後にレスメニューを表示</label>
		<li><label>お知らせの表示件数：<input type="text" class="notice" name="NoticeLength" data-min="0" data-max="99" data-keybind="num" value="@<Preference.NoticeLength>@">件</label>
		</ul></fieldset>
		<fieldset><legend>レス余白のダブルクリック処理</legend><table>
		<tr><th>通常</th>          <td><select name="OnResDblClick[0]">@MACRO<Preference.OnResDblClick[0]>@</select></td></tr>
		<tr><th>Shift</th>         <td><select name="OnResDblClick[1]">@MACRO<Preference.OnResDblClick[1]>@</select></td></tr>
		<tr><th>Ctrl</th>          <td><select name="OnResDblClick[2]">@MACRO<Preference.OnResDblClick[2]>@</select></td></tr>
		<tr><th>Shift+Ctrl</th>    <td><select name="OnResDblClick[3]">@MACRO<Preference.OnResDblClick[3]>@</select></td></tr>
		<tr><th>Alt</th>           <td><select name="OnResDblClick[4]">@MACRO<Preference.OnResDblClick[4]>@</select></td></tr>
		<tr><th>Alt+Shift</th>     <td><select name="OnResDblClick[5]">@MACRO<Preference.OnResDblClick[5]>@</select></td></tr>
		<tr><th>Alt+Ctrl</th>      <td><select name="OnResDblClick[6]">@MACRO<Preference.OnResDblClick[6]>@</select></td></tr>
		<tr><th>Alt+Shift+Ctrl</th><td><select name="OnResDblClick[7]">@MACRO<Preference.OnResDblClick[7]>@</select></td></tr>
		</table></fieldset>
		<input type="button" onclick="apply_functions_pref(event);" value="適用">
		<input type="reset" value="変更前に戻す">
		<input type="button" onclick="initialize_functions_pref();" value="初期値に戻す">
		@COMMAND<
		apply_functions_pref = function(e)
		{
			var f = document.forms.funcPref;
			if (!__validateTextElements([f.URLShortenLength, f.TemplateLength, f.ChapterWidth, f.ResMenuAttachDelay, f.NoticeLength])) return;
			var pref = {
				ExtendAnchor:		f.ExtendAnchor.checked,
				UseReplaceStrTxt:	f.UseReplaceStrTxt.checked,
				URLShortenLength:	parseInt(f.URLShortenLength.value),
				AutoOpenBoardPane:	f.AutoOpenBoardPane.checked,
				TemplateLength:		parseInt(f.TemplateLength.value),
				ChapterWidth:		parseInt(f.ChapterWidth.value),
				ResMenuAttachDelay:	parseInt(f.ResMenuAttachDelay.value),
				NoticeLength:		parseInt(f.NoticeLength.value),
				OnResDblClick: [
					f["OnResDblClick[0]"].value,	f["OnResDblClick[1]"].value,
					f["OnResDblClick[2]"].value,	f["OnResDblClick[3]"].value,
					f["OnResDblClick[4]"].value,	f["OnResDblClick[5]"].value,
					f["OnResDblClick[6]"].value,	f["OnResDblClick[7]"].value,
				],
			};
			Skin.Configulator.patch(Preference, pref);
			Skin.Configulator.save();
			var p = PopupUtil.getPopup(e.target);
			if (p) p.close();
		}
		initialize_functions_pref = function()
		{
			var f = document.forms.funcPref;
			f.ExtendAnchor.checked = _Preference.ExtendAnchor;
			f.UseReplaceStrTxt.checked = _Preference.UseReplaceStrTxt;
			f.URLShortenLength.value = _Preference.URLShortenLength;
			f.AutoOpenBoardPane.checked = _Preference.AutoOpenBoardPane;
			f.TemplateLength.value = _Preference.TemplateLength;
			f.ChapterWidth.value = _Preference.ChapterWidth;
			f.ResMenuAttachDelay.value = _Preference.ResMenuAttachDelay;
			f.NoticeLength.value = _Preference.NoticeLength;
			f["OnResDblClick[0]"].value = _Preference.OnResDblClick[0];
			f["OnResDblClick[1]"].value = _Preference.OnResDblClick[1];
			f["OnResDblClick[2]"].value = _Preference.OnResDblClick[2];
			f["OnResDblClick[3]"].value = _Preference.OnResDblClick[3];
			f["OnResDblClick[4]"].value = _Preference.OnResDblClick[4];
			f["OnResDblClick[5]"].value = _Preference.OnResDblClick[5];
			f["OnResDblClick[6]"].value = _Preference.OnResDblClick[6];
			f["OnResDblClick[7]"].value = _Preference.OnResDblClick[7];
		}
		>@
		</form>

		<form name="imgPref" class="prefpage" data-key="images">
		<fieldset><legend>画像</legend><ul>
		<li><label><input type="checkbox" name="AutoPreviewOutlinks" @CHECKED<Preference.AutoPreviewOutlinks>@>Outlinkを自動展開</label>
		<li><label>プレビューのサイズ：<input type="text" class="px" name="ImagePopupSize" data-min="16" data-max="10000" data-keybind="num" value="@<Preference.ImagePopupSize>@">px</label>
		</ul></fieldset>
		<fieldset><legend>メディアビュアー</legend><ul>
		<li><label>ビューアー先読み件数：<input type="text" class="resno" name="ViewerPreloadWidth" data-min="-1" data-max="10000" data-keybind="num" value="@<Preference.ViewerPreloadWidth>@">件(-1で全件)</label>
		<li><label>カーソルを消すまで：<input type="text" class="sec" name="ViewerCursorHideAt" data-min="1" data-max="10000" data-keybind="num" value="@<Preference.ViewerCursorHideAt>@">秒</label>
		<li><label>スライドショーの間隔：<input type="text" class="sec" name="SlideshowInterval" data-min="1" data-max="10000" data-keybind="num" value="@<Preference.SlideshowInterval>@">秒</label>
		</ul></fieldset>
		<input type="button" onclick="apply_images_pref(event);" value="適用">
		<input type="reset" value="変更前に戻す">
		<input type="button" onclick="initialize_images_pref();" value="初期値に戻す">
		@COMMAND<
		apply_images_pref = function(e)
		{
			var f = document.forms.imgPref;
			if (!__validateTextElements([f.ImagePopupSize, f.ViewerPreloadWidth, f.ViewerCursorHideAt, f.SlideshowInterval])) return;
			var pref = {
				ImagePopupSize:		parseInt(f.ImagePopupSize.value),
				ViewerPreloadWidth:	parseInt(f.ViewerPreloadWidth.value),
				ViewerCursorHideAt:	parseInt(f.ViewerCursorHideAt.value),
				SlideshowInterval:	parseInt(f.SlideshowInterval.value),
				AutoPreviewOutlinks:	f.AutoPreviewOutlinks.checked,
			};
			Skin.Configulator.patch(Preference, pref);
			Skin.Configulator.save();
			var p = PopupUtil.getPopup(e.target);
			if (p) p.close();
		}
		initialize_images_pref = function()
		{
			var f = document.forms.imgPref;
			f.ImagePopupSize.value = _Preference.ImagePopupSize;
			f.ViewerPreloadWidth.value = _Preference.ViewerPreloadWidth;
			f.ViewerCursorHideAt.value = _Preference.ViewerCursorHideAt;
			f.SlideshowInterval.value = _Preference.SlideshowInterval;
			f.AutoPreviewOutlinks.value = _Preference.AutoPreviewOutlinks;
		}
		>@
		</form>

		<form name="popupPref" class="prefpage" data-key="popups">
		<fieldset><legend>振る舞い</legend><ul>
		<li><label>ポップアップの表示遅延：<input type="text" class="msec" name="ResPopupDelay" data-min="-1" data-max="10000" data-keybind="num" value="@<Preference.ResPopupDelay>@">ミリ秒</label>
		<li><label><input type="checkbox" name="PopupDestructChain" @CHECKED<Preference.PopupDestructChain>@>ポップアップを連鎖的に破壊する</label>
		<li><label><input type="checkbox" name="FloatingPopupFixed" @CHECKED<Preference.FloatingPopupFixed>@>フロート状態のポップアップのスクロール位置を固定</label>
		</ul></fieldset>
		<fieldset><legend>タブ化</legend><ul>
		<li><label>複数レス表示時のタブ化幅：<input type="text" class="resno" name="ResPopupPageWidth" data-min="1" data-max="1000" data-keybind="num" value="@<Preference.ResPopupPageWidth>@">件</label>
		<li><label><input type="checkbox" name="ResPopupAlwaysShowTabs" @CHECKED<Preference.ResPopupAlwaysShowTabs>@>レスポップアップを常時タブで表示</label>
		</ul></fieldset>
		<fieldset><legend>スタイル</legend><ul>
		<li><label>吹き出しオフセット：<input type="text" class="px" name="PopupLeft" data-min="-10000" data-max="10000" data-keybind="num" value="@<Preference.PopupLeft>@">px</label>
		<li><label>右マージン：<input type="text" class="px" name="PopupRightMargin" data-min="-10000" data-max="10000" data-keybind="num" value="@<Preference.PopupRightMargin>@">px</label>
		</ul></fieldset>
		<input type="button" onclick="apply_popups_pref(event);" value="適用">
		<input type="reset" value="変更前に戻す">
		<input type="button" onclick="initialize_popups_pref();" value="初期値に戻す">
		@COMMAND<
		apply_popups_pref = function(e)
		{
			var f = document.forms.popupPref;
			if (!__validateTextElements([f.ResPopupDelay, f.PopupLeft, f.PopupRightMargin, f.ResPopupPageWidth])) return;
			var pref = {
				ResPopupDelay:		parseInt(f.ResPopupDelay.value),
				PopupLeft:		parseInt(f.PopupLeft.value),
				PopupRightMargin:	parseInt(f.PopupRightMargin.value),
				ResPopupPageWidth:	parseInt(f.ResPopupPageWidth.value),
				FloatingPopupFixed:	f.FloatingPopupFixed.checked,
				PopupDestructChain:	f.PopupDestructChain.checked,
				ResPopupAlwaysShowTabs:	f.ResPopupAlwaysShowTabs.checked,
			};
			Skin.Configulator.patch(Preference, pref);
			Skin.Configulator.save();
			var p = PopupUtil.getPopup(e.target);
			if (p) p.close();
		}
		initialize_popups_pref = function()
		{
			var f = document.forms.popupPref;
			f.ResPopupDelay.value = _Preference.ResPopupDelay;
			f.PopupLeft.value = _Preference.PopupLeft;
			f.PopupRightMargin.value = _Preference.PopupRightMargin;
			f.ResPopupPageWidth.value = _Preference.ResPopupPageWidth;
			f.FloatingPopupFixed.value = _Preference.FloatingPopupFixed;
			f.PopupDestructChain.value = _Preference.PopupDestructChain;
			f.ResPopupAlwaysShowTabs.value = _Preference.ResPopupAlwaysShowTabs;
		}
		>@
		</form>

		<form name="loadPref" class="prefpage" data-key="loading">
		<fieldset><legend>挙動</legend><ul>
		<li><label><input type="checkbox" name="FocusNewResAfterLoad" @CHECKED<Preference.FocusNewResAfterLoad>@>ロード時、新着レスにジャンプ</label>
		</ul></fieldset>
		<fieldset><legend>追加読み込み</legend><ul>
		<li><label>読み込み幅：<input type="text" class="resno" name="MoreWidth" data-min="0" data-max="1000" data-keybind="num" value="@<Preference.MoreWidth>@">件(0ですべて)</label>
		<li><label>自動追加読み込み間隔：<input type="text" class="sec" name="AutoReloadInterval" data-min="30" data-max="10000" data-keybind="num" value="@<Preference.AutoReloadInterval>@">秒</label>
		<li><label>自動追加読み込みを自動開始するURLのパターン：<br>
		<input type="text" class="regexp" name="AutoAutoReloadPtn" data-keybind="regexp" value="@<Preference.AutoAutoReloadPtn>@"></label>
		</ul></fieldset>
		<fieldset><legend>スクロール操作での追加読み込み</legend><ul>
		<li><label><input type="checkbox" name="LoadBackwardOnTopWheel" @CHECKED<Preference.LoadBackwardOnTopWheel>@>先頭でのホイール操作で前方に追加読み込み</label>
		<li><label><input type="checkbox" name="LoadForwardOnBottomWheel" @CHECKED<Preference.LoadForwardOnBottomWheel>@>末尾でのホイール操作で後方に追加読み込み</label>
		<li><label>スクロール操作量：<input type="text" class="scroll" name="LoadOnWheelDelta" data-min="0" data-max="1000" data-keybind="num" value="@<Preference.LoadOnWheelDelta>@">行分で実行</label>
		<li><label>追加読み込み幅：<input type="text" class="resno" name="LoadOnWheelWidth" data-min="0" data-max="1000" data-keybind="num" value="@<Preference.LoadOnWheelWidth>@">件(0ですべて)</label>
		<li><label><input type="checkbox" name="LoadOnWheelCheckNew" @CHECKED<Preference.LoadOnWheelCheckNew>@>新着を確認する</label>
		</ul></fieldset>
		<input type="button" onclick="apply_loading_pref(event);" value="適用">
		<input type="reset" value="変更前に戻す">
		<input type="button" onclick="initialize_loading_pref();" value="初期値に戻す">
		@COMMAND<
		apply_loading_pref = function(e)
		{
			var f = document.forms.loadPref;
			if (!__validateTextElements([f.MoreWidth, f.AutoReloadInterval, f.LoadOnWheelWidth, f.LoadOnWheelDelta])) return;
			var pref = {
				MoreWidth:			parseInt(f.MoreWidth.value),
				AutoReloadInterval:		parseInt(f.AutoReloadInterval.value),
				AutoAutoReloadPtn: 		f.AutoAutoReloadPtn.value,
				FocusNewResAfterLoad:		f.FocusNewResAfterLoad.checked,
				LoadBackwardOnTopWheel:		f.LoadBackwardOnTopWheel.checked,
				LoadForwardOnBottomWheel:	f.LoadForwardOnBottomWheel.checked,
				LoadOnWheelWidth:		parseInt(f.LoadOnWheelWidth.value),
				LoadOnWheelCheckNew:		f.LoadOnWheelCheckNew.checked,
				LoadOnWheelDelta:		parseInt(f.LoadOnWheelDelta.value),
			};
			Skin.Configulator.patch(Preference, pref);
			Skin.Configulator.save();
			var p = PopupUtil.getPopup(e.target);
			if (p) p.close();
		}
		initialize_loading_pref = function()
		{
			var f = document.forms.loadPref;
			f.MoreWidth = _Preference.MoreWidth;
			f.AutoReloadInterval = _Preference.AutoReloadInterval;
			f.AutoAutoReloadPtn = _Preference.AutoAutoReloadPtn;
			f.FocusNewResAfterLoad = _Preference.FocusNewResAfterLoad;
			f.LoadBackwardOnTopWheel = _Preference.LoadBackwardOnTopWheel;
			f.LoadForwardOnBottomWheel = _Preference.LoadForwardOnBottomWheel;
			f.LoadOnWheelWidth = _Preference.LoadOnWheelWidth;
			f.LoadOnWheelCheckNew = _Preference.LoadOnWheelCheckNew;
			f.LoadOnWheelDelta = _Preference.LoadOnWheelDelta;
		}
		>@
		</form>

		<form name="analyzePref" class="prefpage" data-key="analyze">
		<fieldset><legend>構造解析</legend><ul>
		<li><label><input type="checkbox" name="EnableNextThreadSearch" @CHECKED<Preference.EnableNextThreadSearch>@>次スレ検索</label>（&gt;&gt;<input type="text" class="resno" name="NextThreadSearchBeginsAt" data-min="1" data-max="10000" data-keybind="num" value="@<Preference.NextThreadSearchBeginsAt>@">以降で探索）
		<li><label><input type="text" class="resno" name="ReplyCheckMaxWidth" data-min="2" data-max="10000" data-keybind="num" value="@<Preference.ReplyCheckMaxWidth>@">件以上のレスに言及する場合、逆参照に数えない</label>
		</ul></fieldset>
		<fieldset><legend>レポート</legend>
		<div>
			<div id="pref_report"></div>
			<div>
			<input type="button" onclick="Skin.Diagnostics.RefreshIdReport(event.target.parentNode.previousElementSibling);" value="ID">
			<input type="button" onclick="Skin.Diagnostics.RefreshDiary(event.target.parentNode.previousElementSibling);" value="日付">
			<input type="button" onclick="Skin.Diagnostics.RefreshHours(event.target.parentNode.previousElementSibling);" value="時間帯">
			<input type="button" onclick="event.target.parentNode.previousElementSibling.innerHTML='';" value="閉じる">
			</div>
		</div>
		</fieldset>

		<input type="button" onclick="apply_analyze_pref(event);" value="適用">
		<input type="reset" value="変更前に戻す">
		<input type="button" onclick="initialize_analyze_pref();" value="初期値に戻す">
		@COMMAND<
		apply_analyze_pref = function(e)
		{
			var f = document.forms.analyzePref;
			if (!__validateTextElements([f.ReplyCheckMaxWidth])) return;
			var pref = {
				EnableNextThreadSearch:		f.EnableNextThreadSearch.checked,
				NextThreadSearchBeginsAt:	parseInt(f.NextThreadSearchBeginsAt.value),
				ReplyCheckMaxWidth:		parseInt(f.ReplyCheckMaxWidth.value),
			};
			Skin.Configulator.patch(Preference, pref);
			Skin.Configulator.save();
			var p = PopupUtil.getPopup(e.target);
			if (p) p.close();
		}
		initialize_analyze_pref = function()
		{
			var f = document.forms.analyzePref;
			f.EnableNextThreadSearch.value = _Preference.EnableNextThreadSearch;
			f.NextThreadSearchBeginsAt.value = _Preference.NextThreadSearchBeginsAt;
			f.ReplyCheckMaxWidth.value = _Preference.ReplyCheckMaxWidth;
		}
		>@
		</form>

		<form name="miscPref" class="prefpage" data-key="thread">
		<fieldset><legend>スレッド</legend><ul>
		<li>この板の名前: <input type="text" value="@<Skin.Thread.boardName>@" name="boardName">
			<input type="button" onclick="Skin.BoardList.setBoardName(null, document.forms.miscPref.boardName.value);" value="変更">
		@<Skin.Configulator.getThreadSelectorHTML()>@
		</ul></fieldset>

		<fieldset><legend>起点情報</legend>
		<div>
			<div id="pref_heads"></div>
			<div>
			<input type="button" onclick="Skin.Diagnostics.RefreshStoryHeads(event.target.parentNode.previousElementSibling);" value="表示">
			<input type="button" onclick="event.target.parentNode.previousElementSibling.innerHTML='';" value="閉じる">
			<div>
		</div>
		</fieldset>

		<fieldset><legend>トラッキング情報</legend>
		<div>
			<div id="pref_tracker"></div>
			<div>
			<input type="button" onclick="Tracker.report(event.target.parentNode.previousElementSibling);" value="表示">
			<input type="button" onclick="event.target.parentNode.previousElementSibling.innerHTML='';" value="閉じる">
			<div>
		</div>
		</fieldset>


		</form>
	</div>
</div>
